{"ast":null,"code":"// Mock fallback data\nconst MOCK_SERVICES = [{\n  id: 1,\n  title: 'Массаж',\n  description: 'Релакс массаж спины',\n  price: 2000,\n  date: '2025-04-01',\n  imageUrl: ''\n}, {\n  id: 2,\n  title: 'Спа',\n  description: 'Спа-процедуры для лица',\n  price: 4500,\n  date: '2025-04-05',\n  imageUrl: 'https://picsum.photos/id/1018/300/200'\n}];\n\n/*export const fetchServices = async (\r\n  name: string = '',\r\n  minPrice: number = 0,\r\n  maxPrice: number = Infinity,\r\n  fromDate: string = '',\r\n  toDate: string = ''\r\n): Promise<Service[]> => {\r\n  try {\r\n    const params = new URLSearchParams();\r\n    if (name) params.append('name', name);\r\n    if (minPrice) params.append('minPrice', minPrice.toString());\r\n    if (maxPrice < Infinity) params.append('maxPrice', maxPrice.toString());\r\n    if (fromDate) params.append('fromDate', fromDate);\r\n    if (toDate) params.append('toDate', toDate);\r\n\r\n    const response = await fetch(`/api/services?${params}`);\r\n    if (!response.ok) throw new Error('Ошибка загрузки услуг');\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.warn('Using mock data due to error:', error);\r\n    return MOCK_SERVICES;\r\n  }\r\n};*/\nexport const fetchServices = async (name, minPrice, maxPrice, fromDate, toDate) => {\n  return mockData.filter(service => {\n    const matchesName = name === '' || service.name.toLowerCase().includes(name.toLowerCase());\n    const matchesMinPrice = service.price >= minPrice;\n    const matchesMaxPrice = service.price <= maxPrice;\n    const matchesFromDate = !fromDate || new Date(service.date) >= new Date(fromDate);\n    const matchesToDate = !toDate || new Date(service.date) <= new Date(toDate);\n    return matchesName && matchesMinPrice && matchesMaxPrice && matchesFromDate && matchesToDate;\n  });\n};","map":{"version":3,"names":["MOCK_SERVICES","id","title","description","price","date","imageUrl","fetchServices","name","minPrice","maxPrice","fromDate","toDate","mockData","filter","service","matchesName","toLowerCase","includes","matchesMinPrice","matchesMaxPrice","matchesFromDate","Date","matchesToDate"],"sources":["C:/Users/Akram/Desktop/New folder/lab6F/lab6F/guest-app/src/utils/api.ts"],"sourcesContent":["import { Service } from '../types';\r\n\r\n// Mock fallback data\r\nconst MOCK_SERVICES: Service[] = [\r\n  {\r\n    id: 1,\r\n    title: 'Массаж',\r\n    description: 'Релакс массаж спины',\r\n    price: 2000,\r\n    date: '2025-04-01',\r\n    imageUrl: ''\r\n  },\r\n  {\r\n    id: 2,\r\n    title: 'Спа',\r\n    description: 'Спа-процедуры для лица',\r\n    price: 4500,\r\n    date: '2025-04-05',\r\n    imageUrl: 'https://picsum.photos/id/1018/300/200' \r\n  }\r\n];\r\n\r\n/*export const fetchServices = async (\r\n  name: string = '',\r\n  minPrice: number = 0,\r\n  maxPrice: number = Infinity,\r\n  fromDate: string = '',\r\n  toDate: string = ''\r\n): Promise<Service[]> => {\r\n  try {\r\n    const params = new URLSearchParams();\r\n    if (name) params.append('name', name);\r\n    if (minPrice) params.append('minPrice', minPrice.toString());\r\n    if (maxPrice < Infinity) params.append('maxPrice', maxPrice.toString());\r\n    if (fromDate) params.append('fromDate', fromDate);\r\n    if (toDate) params.append('toDate', toDate);\r\n\r\n    const response = await fetch(`/api/services?${params}`);\r\n    if (!response.ok) throw new Error('Ошибка загрузки услуг');\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.warn('Using mock data due to error:', error);\r\n    return MOCK_SERVICES;\r\n  }\r\n};*/\r\nexport const fetchServices = async (\r\n  name: string,\r\n  minPrice: number,\r\n  maxPrice: number,\r\n  fromDate: string,\r\n  toDate: string\r\n) => {\r\n  return mockData.filter(service => {\r\n    const matchesName = name === '' || service.name.toLowerCase().includes(name.toLowerCase());\r\n    const matchesMinPrice = service.price >= minPrice;\r\n    const matchesMaxPrice = service.price <= maxPrice;\r\n    const matchesFromDate = !fromDate || new Date(service.date) >= new Date(fromDate);\r\n    const matchesToDate = !toDate || new Date(service.date) <= new Date(toDate);\r\n\r\n    return matchesName && matchesMinPrice && matchesMaxPrice && matchesFromDate && matchesToDate;\r\n  });\r\n};"],"mappings":"AAEA;AACA,MAAMA,aAAwB,GAAG,CAC/B;EACEC,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,QAAQ;EACfC,WAAW,EAAE,qBAAqB;EAClCC,KAAK,EAAE,IAAI;EACXC,IAAI,EAAE,YAAY;EAClBC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEL,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,KAAK;EACZC,WAAW,EAAE,wBAAwB;EACrCC,KAAK,EAAE,IAAI;EACXC,IAAI,EAAE,YAAY;EAClBC,QAAQ,EAAE;AACZ,CAAC,CACF;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAC3BC,IAAY,EACZC,QAAgB,EAChBC,QAAgB,EAChBC,QAAgB,EAChBC,MAAc,KACX;EACH,OAAOC,QAAQ,CAACC,MAAM,CAACC,OAAO,IAAI;IAChC,MAAMC,WAAW,GAAGR,IAAI,KAAK,EAAE,IAAIO,OAAO,CAACP,IAAI,CAACS,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACV,IAAI,CAACS,WAAW,CAAC,CAAC,CAAC;IAC1F,MAAME,eAAe,GAAGJ,OAAO,CAACX,KAAK,IAAIK,QAAQ;IACjD,MAAMW,eAAe,GAAGL,OAAO,CAACX,KAAK,IAAIM,QAAQ;IACjD,MAAMW,eAAe,GAAG,CAACV,QAAQ,IAAI,IAAIW,IAAI,CAACP,OAAO,CAACV,IAAI,CAAC,IAAI,IAAIiB,IAAI,CAACX,QAAQ,CAAC;IACjF,MAAMY,aAAa,GAAG,CAACX,MAAM,IAAI,IAAIU,IAAI,CAACP,OAAO,CAACV,IAAI,CAAC,IAAI,IAAIiB,IAAI,CAACV,MAAM,CAAC;IAE3E,OAAOI,WAAW,IAAIG,eAAe,IAAIC,eAAe,IAAIC,eAAe,IAAIE,aAAa;EAC9F,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}